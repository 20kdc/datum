/*
 * datum-rs - Quick to implement S-expression format
 * Written starting in 2024 by contributors (see CREDITS.txt at repository's root)
 * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
 * A copy of the Unlicense should have been supplied as COPYING.txt in this repository. Alternatively, you can find it at <https://unlicense.org/>.
 */

use core::fmt::Display;

/// Any error producible by Datum.
#[non_exhaustive]
#[derive(Clone, Copy, PartialEq, Eq, Debug)]
pub enum DatumErrorKind {
    /// Ran out of room in a buffer.
    /// Happens in [crate::DatumPipeTokenizer] if the passed [core::fmt::Write] implementor fails.
    OutOfRoom,
    /// Interrupted; you should re-parse with more data.
    /// Happens on various EOF conditions.
    Interrupted,
    /// Bad data.
    BadData,
    /// Custom error signal. Will never be generated by Datum.
    /// Beware that external libraries may have their own user stages.
    Custom,
}

impl Display for DatumErrorKind {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        write!(f, "{:?}", self)
    }
}

/// Diagnostic offset. Units are dependent on how you use it.
pub type DatumOffset = u64;

/// Datum error.
/// Notably, writing uses a different error type, so these are read-focused.
#[derive(Clone, Copy, Debug)]
pub struct DatumError {
    /// Kind of error. Useful to distingulish EOF errors from non-EOF errors.
    pub kind: DatumErrorKind,
    /// Error occurred at this offset. Offsets are entirely caller-supplied, except when iterator wrapping is in use.
    pub offset: DatumOffset,
    /// Message.
    pub message: &'static str,
}

// this should be migrated to core::error::Error once that stabilizes

#[cfg(feature = "std")]
impl std::error::Error for DatumError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        None
    }
    fn description(&self) -> &str {
        self.message
    }
    fn cause(&self) -> Option<&dyn std::error::Error> {
        None
    }
}

impl Display for DatumError {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        write!(f, "{} @ {}: {}", self.kind, self.offset, self.message)
    }
}

/// Creates a [DatumError].
/// Beware: If `detailed_errors` is off, messages are discarded.
#[cfg(feature = "detailed_errors")]
#[macro_export]
macro_rules! datum_error {
    ($kind:ident, $offset:expr, $info:literal) => {
        $crate::DatumError {
            kind: $crate::DatumErrorKind::$kind,
            offset: $offset,
            message: $info,
        }
    };
}

/// Creates a [DatumError].
/// Beware: If `detailed_errors` is off, messages are discarded.
#[cfg(not(feature = "detailed_errors"))]
#[macro_export]
macro_rules! datum_error {
    ($kind:ident, $offset:expr, $info:literal) => {
        $crate::DatumError {
            kind: $crate::DatumErrorKind::$kind,
            offset: $offset,
            message: "",
        }
    };
}

/// Datum result for the given value.
pub type DatumResult<V> = Result<V, DatumError>;
