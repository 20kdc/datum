/*
 * datum-rs - Quick to implement S-expression format
 * Written starting in 2024 by contributors (see CREDITS.txt at repository's root)
 * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
 * A copy of the Unlicense should have been supplied as COPYING.txt in this repository. Alternatively, you can find it at <https://unlicense.org/>.
 */

#[cfg(feature = "alloc")]
use alloc::collections::VecDeque;

/// Any error producible by Datum.
#[non_exhaustive]
#[derive(Clone, Copy, PartialEq, Eq, Debug)]
pub enum DatumErrorKind {
    /// Ran out of room in a buffer.
    OutOfRoom,
    /// Interrupted; you should re-parse with more data
    Interrupted,
    /// Bad data
    BadData,
    /// User error signal. Will never be generated by Datum.
    /// Beware that external libraries may have their own user stages.
    User
}

/// Datum error.
/// Notably, writing uses a different error type, so these are read-focused.
#[derive(Clone, Copy, Debug)]
pub struct DatumError {
    /// Kind of error. Useful to distingulish EOF errors from non-EOF errors.
    pub kind: DatumErrorKind,
    /// Rust file and line.
    pub rust_source: &'static str,
    /// Message.
    pub message: &'static str
}

/// Creates a [DatumError] formatted with the Rust file and line.
/// Expects you to have `use DatumError` etc.
/// Beware: If `detailed_errors` is off, messages are discarded.
#[cfg(feature = "detailed_errors")]
#[macro_export]
macro_rules! datum_error {
    ($kind:ident, $info:literal) => {
        DatumError { kind: DatumErrorKind::$kind, rust_source: concat!(file!(), ":", line!()), message: $info }
    };
}

/// Creates a [DatumError] formatted with the Rust file and line.
/// Expects you to have `use DatumError` etc.
/// Beware: If `detailed_errors` is off, messages are discarded.
#[cfg(not(feature = "detailed_errors"))]
#[macro_export]
macro_rules! datum_error {
    ($kind:ident, $info:literal) => {
        DatumError { kind: DatumErrorKind::$kind, rust_source: "", message: "" }
    };
}

/// Datum result for the given value.
pub type DatumResult<V> = Result<V, DatumError>;

/// Generic "input X, get Y" function
pub trait DatumPipe {
    type Input;
    type Output;

    /// Feeds in I, and you may some amount of O.
    /// If None is passed, EOF happened.
    fn feed<F: FnMut(Self::Output) -> DatumResult<()>>(&mut self, i: Option<Self::Input>, f: &mut F) -> DatumResult<()>;

    /// Feeds into a vec or similar from a slice.
    /// Can also automatically trigger EOF.
    /// ```
    /// use datum_rs::{DatumDecoder, DatumPipe};
    /// let mut decoder = DatumDecoder::default();
    /// let mut results = vec![];
    /// decoder.feed_iter_to_vec(&mut results, "example text".chars(), true);
    /// assert_eq!(results.len(), 12);
    /// ```
    fn feed_iter_to_vec<S: IntoIterator<Item = Self::Input>, V: Extend<Self::Output>>(&mut self, target: &mut V, source: S, eof: bool) -> DatumResult<()> {
        for v in source {
            self.feed(Some(v), &mut |o| { target.extend(Some(o)); Ok(()) })?;
        }
        if eof {
            self.feed(None, &mut |o| { target.extend(Some(o)); Ok(()) })
        } else {
            Ok(())
        }
    }

    /// Composes with another pipeline.
    fn compose<P: DatumPipe<Input = Self::Output>>(self, other: P) -> impl DatumPipe<Input = Self::Input, Output = P::Output> where Self: Sized {
        DatumComposePipe(self, other)
    }
}

/// Composed pipe.
#[derive(Clone, Copy, PartialEq, Eq, Debug)]
pub struct DatumComposePipe<A: DatumPipe, B: DatumPipe<Input = A::Output>>(pub A, pub B);

impl<A: DatumPipe, B: DatumPipe<Input = A::Output>> DatumPipe for DatumComposePipe<A, B> {
    type Input = A::Input;
    type Output = B::Output;

    fn feed<F: FnMut(Self::Output) -> DatumResult<()>>(&mut self, i: Option<Self::Input>, f: &mut F) -> DatumResult<()> {
        let m0 = &mut self.0;
        let m1 = &mut self.1;
        let was_none = i.is_none();
        m0.feed(i, &mut |v| m1.feed(Some(v), f))?;
        if was_none {
            m1.feed(None, f)
        } else {
            Ok(())
        }
    }
}

/// Pipe iterator.
/// This maintains an internal [VecDeque] buffer of values to return.
/// When the iterator runs out of elements, an EOF will be signalled.
/// At that point, the pipe iterator will no longer retrieve elements from the source.
#[cfg(feature = "alloc")]
#[derive(Clone)]
pub struct DatumPipeIterator<I: Iterator<Item = S>, S, P: DatumPipe<Input = S>> {
    iterator: I,
    pipeline: P,
    buffer: VecDeque<DatumResult<P::Output>>,
    eof: bool
}

#[cfg(feature = "alloc")]
impl<I: Iterator<Item = S>, S, P: DatumPipe<Input = S>> Iterator for DatumPipeIterator<I, S, P> {
    type Item = DatumResult<P::Output>;

    fn next(&mut self) -> Option<Self::Item> {
        loop {
            if let Some(res) = self.buffer.pop_front() {
                return Some(res);
            } else if self.eof {
                return None;
            } else {
                let base_res = self.iterator.next();
                let buffer = &mut self.buffer;
                if base_res.is_none() {
                    self.eof = true;
                }
                if let Err(err) = self.pipeline.feed(base_res, &mut |v| {
                    buffer.push_back(Ok(v));
                    Ok(())
                }) {
                    buffer.push_back(Err(err));
                }
            }
        }
    }
}

/// This is used to provide [ViaDatumPipe::via_datum_pipe] on [Iterator].
#[cfg(feature = "alloc")]
pub trait ViaDatumPipe<I>: Iterator<Item = I> + Sized {
    /// Parses/handles elements via a [DatumPipe]. See [DatumPipeIterator] for details.
    fn via_datum_pipe<P: DatumPipe<Input = I>>(self, pipe: P) -> DatumPipeIterator<Self, I, P>;
}

#[cfg(feature = "alloc")]
impl<I, V: Iterator<Item = I> + Sized> ViaDatumPipe<I> for V {
    fn via_datum_pipe<P: DatumPipe<Input = I>>(self, pipe: P) -> DatumPipeIterator<Self, I, P> {
        DatumPipeIterator { iterator: self, pipeline: pipe, buffer: VecDeque::new(), eof: false }
    }
}
