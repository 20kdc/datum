/*
 * datum-rs - Quick to implement S-expression format
 * Written starting in 2024 by contributors (see CREDITS.txt at repository's root)
 * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
 * A copy of the Unlicense should have been supplied as COPYING.txt in this repository. Alternatively, you can find it at <https://unlicense.org/>.
 */

/// Any error producible by Datum.
#[non_exhaustive]
#[derive(Clone, Copy, Debug)]
pub enum DatumErrorKind {
    /// Ran out of room in a buffer.
    OutOfRoom,
    /// Interrupted; you should re-parse with more data
    Interrupted,
    /// Bad data
    BadData,
    /// User error signal. Will never be generated by Datum.
    /// Beware that external libraries may have their own user stages.
    User
}

/// Datum error.
/// Notably, writing uses a different error type, so these are read-focused.
#[derive(Clone, Copy, Debug)]
pub struct DatumError {
    /// Kind of error. Useful to distingulish EOF errors from non-EOF errors.
    pub kind: DatumErrorKind,
    /// Rust file and line.
    pub rust_source: &'static str,
    /// Message.
    pub message: &'static str
}

/// Creates a [DatumError] formatted with the Rust file and line.
/// Expects you to have `use DatumError` etc.
/// Beware: If `detailed_errors` is off, messages are discarded.
#[cfg(feature = "detailed_errors")]
#[macro_export]
macro_rules! datum_error {
    ($kind:ident, $info:literal) => {
        DatumError { kind: DatumErrorKind::$kind, rust_source: concat!(file!(), ":", line!()), message: $info }
    };
}

/// Creates a [DatumError] formatted with the Rust file and line.
/// Expects you to have `use DatumError` etc.
/// Beware: If `detailed_errors` is off, messages are discarded.
#[cfg(not(feature = "detailed_errors"))]
#[macro_export]
macro_rules! datum_error {
    ($kind:ident, $info:literal) => {
        DatumError { kind: DatumErrorKind::$kind, rust_source: "", message: "" }
    };
}

/// Datum result for the given value.
pub type DatumResult<V> = Result<V, DatumError>;
